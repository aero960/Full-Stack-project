<?php


use authentication\Authentication;
use authentication\AuthenticationSchema;
use authentication\ResourcesSchema;
use WebpageMNG\Fabric;

interface QueryComposite
{
    function action(): bool;
    function fetchData();
}


abstract class  QueryComposer implements Composer
{
    protected ?PDO $db;
    protected QueryComposite $fetcherComposite;

    public function __construct()
    {
        $this->db = Database::getInstance()->getDatabase();
    }

    protected function beginTransaction()
    {
        if (!$this->db->inTransaction())
            $this->db->beginTransaction();

    }

    public function action()
    {
        $isOkay = $this->fetcherComposite->action();
        if ($this->db->inTransaction() && !$isOkay) {
            $this->db->rollBack();
            return false;
        }
        return true;
    }

    protected function execute(){
        $this->beginTransaction();
        if ($this->action()){
            $this->commitChanges();
            return true;
        }
        return false;
    }

    protected function commitChanges()
    {
        $this->db->commit();
    }

    //use this in case Select
    public function getData()
    {
        return $this->fetcherComposite->fetchData();
    }
}


class RegisterGenerator extends QueryComposer
{
    public function __construct()
    {

        QueryComposer::__construct();
    }

    public function Register(string $username, string $password, string $email)
    {
        $this->fetcherComposite = new AuthenticationQueryDecorator(new UserRegisterComposite( $username, $password, $email));
        return $this->execute();
    }
    public function getData() : AuthenticationSchema
    {
        return parent::getData(); // TODO: Change the autogenerated stub
    }
}



class LoginGenerator extends QueryComposer
{

    private DateTime $lastLogin;
    public function __construct()
    {
        QueryComposer::__construct();
    }

    public function LoginData( string $username, string $password, string $email)
    {
        $composite = new UserLoginComposite($this, $username,  $password,  $email);
        $this->fetcherComposite =  new AuthenticationQueryDecorator($composite);
        $result = $this->execute();
        $this->lastLogin = $composite->lastLogin;
       return $result;
    }
    public function getLastLogin() {

        return $this->lastLogin;
    }
    public function getData() : AuthenticationSchema
    {
        return parent::getData();
    }
}


class UpdateGenerator extends QueryComposer {

    public function __construct()
    {
        QueryComposer::__construct();
    }
    public function updateUser($id,string $firstname,string $lastname,string $mobile,string $intro,string $profile,string $image){
        $this->fetcherComposite = new QueryDecoratorUserSchema(new UserUpdateComposite( $id,$firstname,$lastname,$mobile,$intro,$profile,$image));
        $this->execute();
    }

    public function getData() : ResourcesSchema
    {
        return parent::getData(); // TODO: Change the autogenerated stub
    }
}







